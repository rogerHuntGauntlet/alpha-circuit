// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  apiKey        String?       @unique
  company       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  apiKeys       ApiKey[]
  apiUsage      ApiUsage[]
  matches       Match[]
}

model ApiKey {
  id            String        @id @default(cuid())
  key           String        @unique
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  lastUsed      DateTime      @default(now())
  isActive      Boolean       @default(true)
  apiUsage      ApiUsage[]
}

model ApiUsage {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  apiKeyId      String
  apiKey        ApiKey        @relation(fields: [apiKeyId], references: [id])
  endpoint      String
  method        String
  statusCode    Int
  timestamp     DateTime      @default(now())
  responseTime  Int           // in milliseconds
  ipAddress     String?
  userAgent     String?
}

model Match {
  id                String        @id @default(cuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  playerCount      Int
  groupCount       Int
  optimizationType String
  status           String        @default("completed")
  quality          Int           // 0-100 quality score
  createdAt        DateTime      @default(now())
  completedAt      DateTime?
  matchData        Json          // Stores the actual match results
}
